'''
题目: 把字符串转换成整数

将一个字符串转换成一个整数，要求不能使用字符串转换整数的库函数。 数值为0或者字符串不是一个合法的数值则返回0

输入描述:
输入一个字符串,包括数字字母符号,可以为空

输出描述:
如果是合法的数值表达则返回该数字，否则返回0

示例1:
输入: 
+2147483647
1a33

输出:
2147483647
0
'''

# 方法: 判断是否有符号位, 然后循环计算结果, total = 10 * total + int(s[i]), 若存在符号位, 最终结果与符号位相乘
# 注意: 此问题需要判断int32是否溢出的情况, 溢出则返回0, int32的范围为[-2^31, 2^31 - 1]
# 数在计算机中以补码存放, 二进制最高位表示符号位
# -2^31 = -2147483648 = 1000 0000 0000 0000 0000 0000 0000 0000 = 0x80000000
# 2^31 - 1 = 2147483647 = 0111 1111 1111 1111 1111 1111 1111 1111 = 0x7FFFFFFF
# 1000 0000 0000 0000 0000 0000 0000 0000 <= int32 <= 0111 1111 1111 1111 1111 1111 1111 1111

class Solution:
    def StrToInt(self, s):
        # write code here
        if s == '':
            return 0

        total = 0
        sign = 0

        if s[0] == '+':
            sign = 1
        
        if s[0] == '-':
            sign = -1
        
        for i in range(abs(sign), len(s)):
            if s[i] >= '0' and s[i] <= '9':
                total = 10 * total + int(s[i])
            else:
                return 0
        
        total = total * sign if sign else total
        
        # 注意: 此问题需要判断int32是否溢出的情况, 溢出则返回0, int32的范围为[-2^31, 2^31 - 1]
        return total if total >= -0x80000000 and total <= 0x7FFFFFFF else 0

if __name__ == "__main__":
    # a = '2147483647'
    a = '-2147483649'
    s = Solution()
    print(s.StrToInt(a))